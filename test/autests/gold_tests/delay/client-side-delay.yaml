meta:
    version: '1.0'

# The delays in this file come to about 1.5 seconds. (Keep in mind that the two
# sessions are run in parallel.)

sessions:

# Verify the user can add a space between the number and the unit.
- delay: 250 ms

#
# First session: since there is no "protocol" node for this session,
# HTTP/1.1 over TCP (no TLS) is assumed.
#
  transactions:

  # Specify a delay of 25 milliseconds using microseconds as the unit.
  - client-request:
      delay: 250000us

      method: POST
      url: /pictures/flower.jpeg
      version: '1.1'
      headers:
        fields:
        - [ Host, www.example.com ]
        - [ Content-Type, image/jpeg ]
        - [ Content-Length, '399' ]
        - [ uuid, first-request ]

    proxy-request:
      url:
      - [ path, { value: flower.jpeg, as: contains } ]

      headers:
        fields:
        - [ Content-Length, { value: '399', as: present } ]

    server-response:
      status: 200
      reason: OK
      headers:
        fields:
        - [ Date, "Sat, 16 Mar 2019 03:11:36 GMT" ]
        - [ Content-Type, image/jpeg ]
        - [ Transfer-Encoding, chunked ]
        - [ Connection, keep-alive ]
      content:
        size: 3432

    proxy-response:
      status: 200
      headers:
        fields:
        - [ Transfer-Encoding, { value: chunked, as: equal } ]

#
# Specify a session delay for an HTTP/2 conneciton.
#
- protocol:
  - name: http
    version: 2
  - name: tls
    sni: test_sni
  - name: tcp
  - name: ip

  # Verify the ability to specify seconds as a unit.
  delay: 1s

  transactions:

  - client-request:
      delay: 500ms
      headers:
        fields:
        - [ :method, POST ]
        - [ :scheme, https ]
        - [ :authority, www.example.com ]
        - [ :path, /pictures/flower.jpeg ]
        - [ Content-Type, image/jpeg ]
        - [ uuid, second-request ]
      content:
        size: 399

    proxy-request:
      url:
      - [ path, { value: flower.jpeg, as: contains } ]

      headers:
        fields:
        - [ :method, POST ]
        - [ :scheme, https ]
        - [ :authority, www.example.com ]
        - [ :path,        { value: flower.jpeg, as: contains } ]
        - [ Content-Type, { value: image/jpeg,  as: equal } ]

    server-response:
      headers:
        fields:
        - [ :status, 200 ]
        - [ Date, "Sat, 16 Mar 2019 03:11:36 GMT" ]
        - [ Content-Type, image/jpeg ]
      content:
        size: 3432

    proxy-response:
      status: 200

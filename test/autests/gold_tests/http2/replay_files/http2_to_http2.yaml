meta:
  version: '1.0'
sessions:
- protocol:
  - name: http
    version: 2
  - name: tls
    sni: test_sni
  - name: tcp
  - name: ip

  transactions:

  #
  # Use Content-Length in each message to verify we handle that correctly.
  # Also, verify that the method, scheme, etc. nodes can be used in place
  # of the :method, :scheme, etc. pseudo header fields.
  #
  - all:
      headers:
        fields:
        - [ uuid, 1 ]

    client-request:
      method: GET
      scheme: https
      url: https://example.data.com/a/path?q=3
      headers:
        encoding: esc_json
        fields:
        - [ Accept, '*/*' ]
        - [ Accept-Language, en-us ]
        - [ Accept-Encoding, gzip ]
        # Generally HTTP/2 does not use the Host header field, instead relying
        # upon the :authority pseudo header field. But Proxy Verifier should do both if
        # requested.
        - [ Host, example.data.com ]
        - [ x-test-duplicate-combined, [ first, second ] ]
        - [ x-test-duplicate-separate, first ]
        - [ x-test-duplicate-separate, second ]
        - [ Content-Length, "0" ]
      content:
        encoding: plain
        size: 0

    proxy-request:
      # HTTP/2 on the server-side.
      protocol:
      - name: http
        version: 2
      - name: tls
        sni: test_sni
      - name: tcp
      - name: ip

      # URL verification is supported for HTTP/2, with the appropriate fields
      # from :scheme, :authority, and :path used.
      - [ scheme, { value: https, as: equal } ]
      - [ host, { value: example.data.com, as: equal } ]
      - [ path, { value: /a/path, as: equal } ]
      - [ authority, { value: example.data.com, as: equal } ]
      - [ net-loc, { value: example.data.com, as: equal } ]
      - [ query, { value: q=3, as: present } ]
      - [ query, { value: 3, as: contains } ]
      - [ fragment, { as: absent } ]
      - [ host, { as: present } ]
      - [ path, { value: /, as: prefix } ]
      - [ port, { as: absent } ]
      headers:
        encoding: esc_json
        fields:
        - [ :method, { value: GET, as: equal } ]
        - [ :scheme, { value: https, as: equal } ]
        - [ :authority, { value: example.data.com, as: equal } ]
        - [ :path, { value: '/a/path?q=3', as: equal } ]
        # Note that the Host field is still sent.
        - [ Host, { value: example.data.com, as: equal } ]
        - [ Content-Length, { value: "0", as: equal } ]
        - [ x-test-duplicate-combined, { value: [ first, second ], as: equal } ]
        - [ x-test-duplicate-separate, { value: [ first, second ], as: equal } ]

    server-response:
      status: 200
      headers:
        encoding: esc_json
        fields:
        - [ Cache-Control, private ]
        - [ Content-Encoding, gzip ]
        - [ Content-Type, application/json;charset=utf-8 ]
        - [ Content-Length, '16' ]
        - [ Date, "Sat, 16 Mar 2019 01:13:21 GMT" ]
        - [ Age, '0' ]
        - [ x-test-duplicate-combined, [ one, two ] ]
        - [ x-test-duplicate-separate, one ]
        - [ x-test-duplicate-separate, two ]
      content:
        encoding: plain
        size: 16

    proxy-response:
      headers:
        fields:
        - [ :status, { value: 200, as: equal } ]
        - [ Cache-Control, private ]
        - [ Content-Length, { value: '16', as: equal } ]
        - [ x-test-duplicate-combined, { value: [ one, two ], as: equal } ]
        - [ x-test-duplicate-separate, { value: [ one, two ], as: equal } ]

  #
  # Do these without a content-length to make sure we handle that correctly.
  # Content-Length should not be required.
  #
  # Also, make sure the user can use pseudo header fields rather than the
  # method, scheme, url nodes.
  #
  - all:
      headers:
        fields:
        - [ uuid, 2 ]

    client-request:
      headers:
        encoding: esc_json
        fields:
        - [ :method, POST ]
        - [ :scheme, https ]
        - [ :authority, example.data.com ]
        - [ :path, /a/path ]
        - [ X-Request-Header, request ]
        - [ X-Deleted-Header, this_will_be_deleted ]
        - [ X-Proxy-Directive, "Delete=%<x-deleted-header%> Insert=%<X-Added-Header: 1%>" ]
      content:
        encoding: plain
        size: 10

    proxy-request:
      # HTTP/2 on the server-side.
      protocol:
      - name: http
        version: 2
      - name: tls
        sni: test_sni
      - name: tcp
      - name: ip

      headers:
        fields:
        - [ :method, { value: POST, as: equal } ]
        - [ :scheme, { value: https, as: equal } ]
        - [ :authority, { value: example.data.com, as: equal } ]
        - [ :path, /a/path ]
        - [ X-Request-Header, { as: present } ]
        - [ X-Added-Header, { as: present } ]
        - [ X-Deleted-Header, { as: absent } ]
        - [ Content-Length, { as: absent } ]

    server-response:
      headers:
        encoding: esc_json
        fields:
        - [ :status, 500 ]
        - [ X-Equal-Header, some_content ]
        - [ X-Response-Header, response ]
        - [ X-Deleted-Header2, this_will_be_deleted ]
        - [ X-Proxy-Directive, "Delete=%<x-deleted-header2%> Insert=%<x-added-header: 1%>" ]
      content:
        encoding: plain
        size: 32

    proxy-response:
      headers:
        encoding: esc_json
        fields:
        - [ :status, { value: 500, as: equal } ]
        - [ X-Equal-Header, { value: some_content, as: equal } ]
        - [ X-Response-Header, { as: present } ]
        - [ X-Deleted-Header2, { as: absent } ]
        - [ Content-Length, { as: absent } ]

  #
  # Verify we can handle a response with an empty body.
  #
  - all:
      headers:
        fields:
        - [ uuid, 3 ]

    client-request:
      headers:
        encoding: esc_json
        fields:
        - [ :method, GET ]
        - [ :scheme, https ]
        - [ :authority, example.data.com ]
        - [ :path, /b/path ]
        - [ X-Request-Header, test_request ]
      content:
        encoding: plain
        size: 0

    proxy-request:
      # HTTP/2 on the server-side.
      protocol:
      - name: http
        version: 2
      - name: tls
        sni: test_sni
      - name: tcp
      - name: ip

      headers:
        encoding: esc_json
        fields:
        - [ :method, { value: GET, as: equal } ]
        - [ :scheme, { value: https, as: equal } ]
        - [ :authority, { value: example.data.com, as: equal } ]
        - [ :path, { value: /b/path, as: equal } ]
        - [ X-Request-Header, { value: test_request, as: equal } ]

    server-response:
      headers:
        encoding: esc_json
        fields:
        - [ :status, 200 ]
        - [ X-Response-Header, response ]
      content:
        encoding: plain
        size: 0

    proxy-response:
      headers:
        encoding: esc_json
        fields:
        # Verify old, sequence-specified verification.
        - [ :status, 200, equal ]
        - [ X-Response-Header, response, equal ]
        - [ Content-Length, 0, absent ]

  #
  # Verify we can handle a response with an empty body and a 0 Content-Length.
  #
  - all:
      headers:
        fields:
        - [ uuid, 4 ]

    client-request:
      headers:
        encoding: esc_json
        fields:
        - [ :method, GET ]
        - [ :scheme, https ]
        - [ :authority, example.data.com ]
        - [ :path, /b/path ]
        - [ X-Request-Header, test_request ]
      content:
        encoding: plain
        size: 0

    proxy-request:
      # The session protocol node should be assumed on the server side.

      headers:
        encoding: esc_json
        fields:
        - [ :method, { value: GET, as: equal } ]
        - [ :scheme, { value: https, as: equal } ]
        - [ :authority, { value: example.data.com, as: equal } ]
        - [ :path, { value: /b/path, as: equal } ]
        - [ X-Request-Header, { value: test_request, as: equal } ]

    server-response:
      headers:
        encoding: esc_json
        fields:
        - [ :status, 200 ]
        - [ X-Response-Header, response ]
        - [ Content-Length, 0 ]
      content:
        encoding: plain
        size: 0

    proxy-response:
      headers:
        fields:
        - [ :status, { value: 200, as: equal } ]
        - [ X-Response-Header, { value: response, as: equal } ]
        - [ Content-Length, { value: 0, as: equal } ]

'''
Implement the Proxy Verifier client extensions.
'''
# @file
#
# Copyright 2021, Verizon Media
# SPDX-License-Identifier: Apache-2.0
#

from __future__ import print_function
from socket_util import create_address_argument
import os
from ports import get_port


def _configure_client(obj, process, name, replay_dir, find_ports=True, use_ipv6=False,
                      configure_http=True, configure_https=True, http_ports=None, https_ports=None,
                      ssl_cert='', ca_certs='', verbose=True, other_args=''):
    """
    Configure the process for running the verifier-client.

    Args:
        obj: An object that has a RunDirectory attribute.

        process: (Process) The test process to configure for verifier-client.

        See MakeClientProcess.
    """

    # Create the directory we will setup for the replay binaries to run under.
    client_dir = os.path.join(obj.RunDirectory, name)

    # Create a link of the binary to the rundir and set up the PATH variable.
    # This will be the verifier-client that gets run.
    bin_dir = 'bin'
    process.Env['CLIENT_BIN_PATH'] = bin_dir
    bin_path = os.path.join(client_dir, bin_dir)
    process.Env['PATH'] = bin_path + os.pathsep + process.ComposeEnv()['PATH']
    process.Setup.Copy(process.ComposeVariables().VERIFIER_BIN, bin_path, CopyLogic.SoftFiles)

    # Configure the verifier-client command line arguments.
    command = "verifier-client run "
    if replay_dir:
        # Create a copy of the replay directory in the run directory.
        run_replay_dir = os.path.join(client_dir, os.path.basename(replay_dir))
        process.Setup.Copy(replay_dir, run_replay_dir, CopyLogic.SoftFiles)
        command += " {} ".format(run_replay_dir)

    if configure_http and find_ports and not http_ports:
        http_ports = [get_port(process, "http_port")]

    if http_ports:
        command += "--connect-http "
        command += create_address_argument(http_ports, use_ipv6)
        command += " "

    if configure_https and find_ports and not https_ports:
        https_ports = [get_port(process, "https_port")]

    if https_ports:
        command += "--connect-https "
        command += create_address_argument(https_ports, use_ipv6)
        command += " "

        if ssl_cert == '':
            # Search for the root-level cert.
            test_root = process.TestRoot
            from os.path import dirname
            git_root = dirname(dirname(dirname(test_root)))
            ssl_cert = os.path.join(git_root, "test", "keys", "client.pem")

            if not os.path.isfile(ssl_cert):
                raise ValueError("Tried to use '{}' for --client-cert, but it is not "
                                 "a valid file.".format(ssl_cert))
        if ssl_cert:
            run_ssl_cert = ssl_cert
            if os.path.isfile(ssl_cert):
                run_ssl_cert = os.path.join(client_dir, os.path.basename(ssl_cert))
                process.Setup.Copy(ssl_cert, run_ssl_cert, CopyLogic.SoftFiles)
            command += ' --client-cert "{}" '.format(run_ssl_cert)

        if ca_certs == '':
            # Search for the root-level cert.
            test_root = process.TestRoot
            from os.path import dirname
            git_root = dirname(dirname(dirname(test_root)))
            ca_certs = os.path.join(git_root, "test", "keys", "ca.pem")

            if not os.path.exists(ca_certs):
                raise ValueError("Tried to use '{}' for --ca-certs, but it is not "
                                 "a valid path.".format(ca_certs))
        if ca_certs:
            run_ca_certs = ca_certs
            if os.path.isfile(ca_certs):
                run_ca_certs = os.path.join(client_dir, os.path.basename(ca_certs))
                process.Setup.Copy(ca_certs, run_ca_certs, CopyLogic.SoftFiles)
            command += ' --ca-certs "{}" '.format(run_ca_certs)

    if verbose:
        command += "--verbose diag "

    if other_args:
        command += " {}".format(other_args)

    process.Command = command
    process.ReturnCode = 0


def MakeClientProcess(test, name, replay_dir, find_ports=True, use_ipv6=False,
                      configure_http=True, configure_https=True, http_ports=None, https_ports=None,
                      ssl_cert='', ca_certs='', verbose=True, other_args=''):
    """
    Create a verifier-client process.

    Args:
        test: (Test) The Test object being updated with the client process.

        name: (str) The name to apply to this particular verifier-client instance.
            Individual verifier-client processes must have unique names to
            distinguish between them.

        replay_dir: (path) The directory containing the replay files for the
            client to run with.

        find_ports: (bool) True if the framework should find available ports
            to listen on for http and https connections if none were specified via
            http_ports and https_ports.

        use_ipv6: (bool) True if IPv6 localhost should be used, IPv4 otherise.

        configure_http: (bool) True if http ports should be configured, False if not.

        configure_https: (bool) True if https ports should be configured, False if not.

        http_ports: (list of ints) The set of HTTP ports to connect on.

        https_ports: (list of ints) The set of HTTPS ports to connect on.

        ssl_cert: (path) The location of the cert for HTTPS encryption. If this
            is not provided and https_ports is non-empty, the root-level
            test/keys/client.pem will be searched for and used if it can be found.
            To explicitly test verifier-server with no --client-cert argument, pass in
            None for ssl_cert. Whitespace can be passed in to test --client-cert with
            an empty argument.

        ca_certs: (path) The location of the CA certificate(s) for HTTPS
            encryption. This can be either a single file with multiple
            certificate sections or a directory of certificate files.  If this
            is not provided and https_ports is non-empty, the root-level
            test/keys/ca.pem will be searched for and used if it can be found.
            To explicitly test verifier-server with no --ca-certs argument,
            pass in None for ca_certs.  Whitespace can be passed in to test
            --ca-certs with an empty argument.

        verbose: (bool) Whether to enable debug-level logging.

        other_args: (str) Any other arbitrary options to pass to verifier-client.

    Returns:
        A verifier-client process.
    """
    client = test.Processes.Process(name)
    _configure_client(
        test,
        client,
        name,
        replay_dir,
        find_ports,
        use_ipv6,
        configure_http,
        configure_https,
        http_ports,
        https_ports,
        ssl_cert,
        ca_certs,
        verbose,
        other_args)
    return client


def AddClientProcess(run, name, replay_dir, find_ports=True, use_ipv6=False,
                     configure_http=True, configure_https=True, http_ports=None, https_ports=None,
                     ssl_cert='', ca_certs='', verbose=True, other_args=''):
    """
    Set the Default process of the test run to a verifier-client Process.

    Args:
        run: (TestRun) The test run to which the client process is added.

        For all other arguments, see MakeServerProcess.

    Returns:
        The newly constructed verifier-client for the test run, which is also the
        Default Process of the test run.
    """

    p = run.Processes.Default
    _configure_client(
        run,
        p,
        name,
        replay_dir,
        find_ports,
        use_ipv6,
        configure_http,
        configure_https,
        http_ports,
        https_ports,
        ssl_cert,
        ca_certs,
        verbose,
        other_args)
    return p


##########################################################################
ExtendTest(MakeClientProcess, name="MakeClientProcess")
ExtendTestRun(AddClientProcess, name="AddClientProcess")

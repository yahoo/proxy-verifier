'''
Implement Proxy Verifier test proxy logic
'''
# @file
#
# Copyright 2021, Verizon Media
# SPDX-License-Identifier: Apache-2.0
#

from __future__ import print_function
import os

sentinel_counter = 0


def _configure_proxy(obj, process, name, listen_port=8080, server_port=8081,
                     use_ssl=False, https_pem=None, ca_pem=None, use_http2_to_1=False,
                     use_http2_to_2=False, use_http3_to_1=False):
    """
    Configure the provided process to run the proxy command.

    Args
        obj: An object that has a RunDirectory attribute.

        process: (Process) The test process to configure for replay-server.

        For all other arguments, see MakeProxyProcess
    """

    global sentinel_counter

    use_protocol_list = [use_http2_to_1, use_http2_to_2, use_http3_to_1]
    if use_protocol_list.count(True) > 1:
        raise ValueError(
            "Cannot specify multiple of use_http2_to_1, "
            "use_http2_to_2, and use_http3_to_1 parameters.")

    proxy_rundir = os.path.join(obj.RunDirectory, name)
    process.Setup.MakeDir(proxy_rundir)
    proxy_src = os.path.join(process.ComposeVariables().Autest.AutestSites[0], "test_proxy.py")
    proxy_dest = os.path.join(proxy_rundir, os.path.basename(proxy_src))

    command = "python {} --listen-port {} --server-port {}".format(
        proxy_dest, listen_port, server_port)
    if use_ssl:
        test_root = process.TestRoot
        pem_file = https_pem
        if not pem_file:
            from os.path import dirname
            git_root = dirname(dirname(dirname(test_root)))
            pem_file = os.path.join(git_root, "test", "keys", "client.pem")

            if not os.path.isfile(pem_file):
                raise ValueError("Tried to use '{}' for --https-pem, but it is not "
                                 "a valid file.".format(pem_file))

        run_pem = os.path.join(proxy_rundir, os.path.basename(pem_file))
        process.Setup.Copy(pem_file, run_pem, CopyLogic.SoftFiles)
        command += " --https-pem {}".format(run_pem)

        ca_file = ca_pem
        if not ca_file:
            from os.path import dirname
            git_root = dirname(dirname(dirname(test_root)))
            ca_file = os.path.join(git_root, "test", "keys", "ca.pem")

            if not os.path.isfile(ca_file):
                raise ValueError("Tried to use '{}' for --ca-pem, but it is not "
                                 "a valid file.".format(ca_file))

        run_ca_file = os.path.join(proxy_rundir, os.path.basename(ca_file))
        process.Setup.Copy(ca_file, run_ca_file, CopyLogic.SoftFiles)

        command += " --ca-pem {}".format(run_ca_file)

    if use_http2_to_1:
        command += " --http2_to_1"

    if use_http2_to_2:
        command += " --http2_to_2"

    if use_http3_to_1:
        listening_http3_sentinel = f'quic_socket_is_ready_{sentinel_counter}'
        sentinel_counter += 1
        command += f" --http3_to_1 --listening-http3-sentinel {listening_http3_sentinel}"

    process.Setup.Copy(proxy_src, proxy_dest, CopyLogic.SoftFiles)
    process.Command = command

    if use_http3_to_1:
        # UDP sockets are connectionless, so PortOpen will not work.
        process.Ready = When.FileExists(listening_http3_sentinel)
    else:
        process.Ready = When.PortOpen(listen_port)

    process.ReturnCode = 0


def MakeProxyProcess(test, name, listen_port=8080, server_port=8081,
                     use_ssl=False, https_pem=None, ca_pem=None,
                     use_http2_to_1=False, use_http2_to_2=False,
                     use_http3_to_1=False):
    """
    Create a Process to run the proxy command.

    Args:
        test: (Test) The Test object to add the proxy process to.

        name: (str) The identifying name for the proxy process.

        listen_port: (int) The TCP port on which to listen for connections from
        the client.

        server_port: (int) The TCP port for server to which the proxy should
        connect.

        use_ssl: (bool) True if the proxy should listen for an HTTPS
        connection, false otherwise.

        https_pem: (str) The path to the pem file to use for the HTTPS
        connections.

        ca_pem: (str) The path to the pem file containing certificate authority
        information.

        use_http2_to_1: (bool) True if the connection should expect HTTP/2
        traffic for the client but send HTTP/1 to the server, false otherwise.

        use_http2_to_2: (bool) True if the connection should expect HTTP/2
        traffic for the client and also send HTTP/2 to the server, false otherwise.

        use_http3_to_1: (bool) True if the connection should expect HTTP/3 traffic
        from the client and send HTTP/1 traffic to the server.

    Returns:
        The newly created proxy Process.
    """
    proxy = test.Processes.Process(name)
    _configure_proxy(test, proxy, name, listen_port, server_port,
                     use_ssl, https_pem, ca_pem, use_http2_to_1, use_http2_to_2,
                     use_http3_to_1)
    return proxy


def AddProxyProcess(run, name, listen_port=8080, server_port=8081,
                    use_ssl=False, https_pem=None, ca_pem=None, use_http2_to_1=False,
                    use_http2_to_2=False, use_http3_to_1=False):
    """
    Create a proxy Process and add it to the provided TestRun.

    Args:
        run: (TestRun) The test run to add the new proxy Process to.

        For all other arguments, see MakeProxyProcess.

    Returns:
        The newly created proxy Process.
    """
    proxy = run.Processes.Process(name)
    _configure_proxy(run, proxy, name, listen_port, server_port,
                     use_ssl, https_pem, ca_pem, use_http2_to_1, use_http2_to_2,
                     use_http3_to_1)

    client = run.Processes.Default
    client.StartBefore(proxy)

    return proxy


##########################################################################
ExtendTest(MakeProxyProcess, name="MakeProxyProcess")
ExtendTestRun(AddProxyProcess, name="AddProxyProcess")

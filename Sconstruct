from parts import *

#enable smart linking
SetOptionDefault("LINKFLAGS", ['-Wl,--copy-dt-needed-entries', '-Wl,--as-needed'])
SetOptionDefault("INSTALL_ROOT",  "#")

SetOptionDefault("COMPILER", "${_replace('$TOOLCHAIN',',','_')}")
SetOptionDefault("AUTO_MAKE_DESTDIR", "${ABSPATH('#_destdir/$COMPILER/$PART_ALIAS')}")
SetOptionDefault("CMAKE_DESTDIR", "${ABSPATH('#_destdir/$COMPILER/$PART_ALIAS')}")
SetOptionDefault('default_config', "release")

AddOption("--with-ssl",
          dest='with_ssl',
          nargs=1,
          type='string',
          action='store',
          metavar='DIR',
          default=None,
          help='Optional path to custom build of OpenSSL'
         )

AddOption("--with-nghttp2",
          dest='with_nghttp2',
          nargs=1,
          type='string',
          action='store',
          metavar='DIR',
          default=None,
          help='Optional path to custom build of nghttp2'
         )

AddOption("--with-ngtcp2",
          dest='with_ngtcp2',
          nargs=1,
          type='string',
          action='store',
          metavar='DIR',
          default=None,
          help='Optional path to custom build of ngtcp2'
         )

AddOption("--with-nghttp3",
          dest='with_nghttp3',
          nargs=1,
          type='string',
          action='store',
          metavar='DIR',
          default=None,
          help='Optional path to custom build of nghttp3'
         )

AddOption("--with-libs",
          dest='with_libs',
          nargs=1,
          type='string',
          action='store',
          metavar='DIR',
          default=None,
          help='Optional path containing the various libraries'
         )

AddOption('--enable-asan',
          dest='enable_asan',
          action='store_true',
          help='Configure compiling and linking for ASan.')

path_ssl = None
path_nghttp2 = None
path_nghttp3 = None
path_ngtcp2 = None

libs_path = GetOption("with_libs")
if libs_path is not None:
    # We initially populate these from the broad --with-libs option. Each can
    # be overriden by the more specific options with later processing.
    path_ssl = os.path.join(libs_path, 'openssl')
    path_nghttp2 = os.path.join(libs_path, 'nghttp2')
    path_nghttp3 = os.path.join(libs_path, 'nghttp3')
    path_ngtcp2 = os.path.join(libs_path, 'ngtcp2')


def GetOptionWithDefault(option_name, default_value):
    '''
    Return GetOption's result if option_name was specified, otherwise return
    default_value.
    '''
    specific_value = GetOption(option_name)
    return specific_value if specific_value is not None else default_value


path_ssl = GetOptionWithDefault("with_ssl", path_ssl)
if path_ssl is not None:
  Part("#lib/openssl.part", CUSTOM_PATH=path_ssl)
else:
  Part(
    "openssl",
    "#lib/openssl.part",
    vcs_type=VcsGit(server="github.com", repository="quictls/openssl",
                    protocol="https",
                    revision="a6e9d76db343605dae9b59d71d2811b195ae7434"
                    ),
    mode=['SKIP_DOCS'],
  )

path_nghttp2 = GetOptionWithDefault("with_nghttp2", path_nghttp2)
if path_nghttp2 is not None:
    Part("#lib/nghttp2.part", CUSTOM_PATH=path_nghttp2)
else:
    Part(
        "nghttp2",
        "#lib/nghttp2.part",
        vcs_type=VcsGit(server="github.com", repository="tatsuhiro-t/nghttp2",
                        protocol="https",
                        # This commit will be removed whenever the nghttp2
                        # author rebases origin/quic.  For reference, this
                        # commit is currently described as:
                        #
                        # commit cdf58e370e6a843b0965aabcd75908ca52633b60
                        # Author: Tatsuhiro Tsujikawa <tatsuhiro.t@gmail.com>
                        # Date:   Sat Mar 27 23:37:37 2021 +0900
                        #
                        #     Compile with the latest ngtcp2

                        revision="cdf58e370e6a843b0965aabcd75908ca52633b60"
                        ),
        mode=['SKIP_DOCS'],
    )

path_ngtcp2 = GetOptionWithDefault("with_ngtcp2", path_ngtcp2)
if path_ngtcp2 is not None:
    Part("#lib/ngtcp2.part", CUSTOM_PATH=path_ngtcp2)
else:
  Part(
    "ngtcp2",
    "#lib/ngtcp2.part",
    vcs_type=VcsGit(server="github.com", repository="ngtcp2/ngtcp2",
                    protocol="https",
                    revision="169c68127b78ea906c96b49b9e18d4f805ab8eda"
                    ),
    mode=['SKIP_DOCS'],
  )

path_nghttp3 = GetOptionWithDefault("with_nghttp3", path_nghttp3)
if path_nghttp3 is not None:
  Part("#lib/nghttp3.part", CUSTOM_PATH=path_nghttp3)
else:
  Part(
    "nghttp3",
    "#lib/nghttp3.part",
    vcs_type=VcsGit(server="github.com", repository="ngtcp2/nghttp3",
                    protocol="https",
                    revision="aed3107f9104eae77d97ed8093caa8f3b7ef64d4"
                    ),
    mode=['SKIP_DOCS'],
  )

Part("#lib/libyaml-cpp.part",vcs_type=VcsGit(server="github.com", repository="jbeder/yaml-cpp.git", tag="yaml-cpp-0.6.3"), package_group="proxy-verifier")

custom_rpath=[]
if path_ssl is not None:
  custom_rpath.append(path_ssl + "/lib")
if path_nghttp2 is not None:
  custom_rpath.append(path_nghttp2 + "/lib")
if path_ngtcp2 is not None:
  custom_rpath.append(path_ngtcp2 + "/lib")
if path_nghttp3 is not None:
  custom_rpath.append(path_nghttp3 + "/lib")
SetOptionDefault("RPATH",  custom_rpath)

Part("code/libswoc.part",vcs_type=VcsGit(server="github.com", repository="SolidWallOfCode/libswoc", tag="1.2.19"), package_group="proxy-verifier")

pv_mode = []
if GetOption("enable_asan"):
  pv_mode.append('enable-asan')

Default("proxy-verifier::")
Part("local/parts/proxy-verifier.part", package_group="proxy-verifier", mode=pv_mode)
Part("test/unit_tests/unit_tests.part")

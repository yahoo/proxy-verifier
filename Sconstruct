from parts import *

#enable smart linking
SetOptionDefault("LINKFLAGS", ['-Wl,--copy-dt-needed-entries', '-Wl,--as-needed'])
SetOptionDefault("INSTALL_ROOT",  "#")

AddOption("--with-ssl",
          dest='with_ssl',
          nargs=1,
          type='string',
          action='store',
          metavar='DIR',
          default=None,
          help='Optional path to custom build of OpenSSL'
         )

AddOption("--with-nghttp2",
          dest='with_nghttp2',
          nargs=1,
          type='string',
          action='store',
          metavar='DIR',
          default=None,
          help='Optional path to custom build of nghttp2'
         )

path_ssl = GetOption("with_ssl")
Part("#lib/openssl.part", CUSTOM_PATH=path_ssl)
path_nghttp2 = GetOption("with_nghttp2")
Part("#lib/nghttp2.part", CUSTOM_PATH=path_nghttp2)
Part("#lib/libyaml-cpp.part",vcs_type=VcsGit(server="github.com", repository="jbeder/yaml-cpp.git", tag="yaml-cpp-0.6.2"), package_group="proxy-verifier")

custom_rpath=[]
if path_ssl is not None:
  custom_rpath.append(path_ssl + "/lib")
if path_nghttp2 is not None:
  custom_rpath.append(path_nghttp2 + "/lib")
SetOptionDefault("RPATH",  custom_rpath)

Part("code/libswoc.part",vcs_type=VcsGit(server="github.com", repository="SolidWallOfCode/libswoc", tag="dev-1-2-9"), package_group="proxy-verifier")


Part("local/parts/proxy-verifier.part", package_group="proxy-verifier")
Part("test/unit_tests/unit_tests.part")

